{
  "id": "m2-l10-oop-abstraction",
  "title": "OOP Abstraction",
  "sections": [
    {
      "type": "read",
      "contentMarkdown": "Abstraction hides implementation details and shows only functionality."
    },
    {
      "type": "example",
      "starterCode": "from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\nclass Circle(Shape):\n    def __init__(self, r):\n        self.r = r\n    def area(self):\n        return 3.14 * self.r * self.r\n\nprint(Circle(5).area())",
      "explainMarkdown": "Abstract class Shape enforces area() implementation."
    },
    {
      "type": "exercise",
      "promptMarkdown": "Create an abstract class Vehicle with abstract method drive(). Implement it in Car class.",
      "starterCode": "# TODO: abstraction example",
      "tests": [
        { "type": "includes", "match": "Driving" }
      ],
      "hints": ["Use abc module"],
      "solutionCode": "from abc import ABC, abstractmethod\nclass Vehicle(ABC):\n    @abstractmethod\n    def drive(self):\n        pass\nclass Car(Vehicle):\n    def drive(self):\n        print('Driving')\nCar().drive()"
    },
    {
      "type": "quiz",
      "question": "Which module provides abstract classes?",
      "choices": ["abc", "abstract", "classlib"],
      "answerIndex": 0,
      "explainMarkdown": "The abc module is for Abstract Base Classes."
    }
  ]
}
